(defun removeNILTop (LIST)
    (cond ((null LIST) nil)
              ((eql (car LIST) nil) (removeNILTop (cdr LIST)))
                        ( T (cons (car LIST) (removeNILTop (cdr LIST))))
                        ))

(defun removeNILMost (LIST)
    ;(print (LIST))
    (cond ((null LIST) nil)
          ((not (atom (car LIST))) (cons (removeNILMost (car LIST)) (removeNILMost (cdr LIST))))
         ;((listp (car LIST))(cons (removeNILMost (car LIST)) (removeNILMost (cdr LIST))))
         ;((eql (car LIST) nil) (removeNILMost (cdr LIST)))
          ((null (car LIST)) (removeNILMost (cdr LIST)))
          (T (cons (car LIST) (removeNILMost (cdr LIST))))
    )
)

(defun reverseTop (LIST)
    (cond   ((null LIST) nil)
                (T (append (reverseTop (cdr LIST)) (list (car LIST))))
                    )
    )

(defun reverseAll (LIST)
   (cond
           ((null LIST) nil)
                   ((listp (car LIST)) (append (reverseAll (cdr LIST)) (list (reverseAll (car LIST)))))
                           (T (append (reverseAll (cdr LIST)) (list (car LIST))))
                             )
   )

(defun palindrome (LIST)
    (cond   ((null LIST) nil)
                (T (equal (reverseTop list) list))
                    )
    )